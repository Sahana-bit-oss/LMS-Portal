pipeline {
    agent {
        docker {
            image 'maven:3.8.6-openjdk-11'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
            post {
                failure {
                    echo 'Checkout failed. Notifying the team...'
                }
            }
        }
        stage('Build and Test') {
            steps {
                sh 'mvn clean package'
            }
            post {
                failure {
                    echo 'Build failed. Please check the logs.'
                }
            }
        }
        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://your-sonarqube-url"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=$SONAR_URL'
                }
            }
            post {
                failure {
                    echo 'Static code analysis failed. Review the SonarQube report.'
                }
            }
        }
        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "sahanal/backend:${BUILD_NUMBER}"
            }
            steps {
                script {
                    sh 'docker build -t ${DOCKER_IMAGE} .'
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
                        docker.image("${DOCKER_IMAGE}").push()
                    }
                }
            }
            post {
                failure {
                    echo 'Docker image build or push failed.'
                }
            }
        }
        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "LMS-Portal"
                GIT_USER_NAME = "Sahana-bit-oss"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        git config user.email "sahanalakshminarayanan@gmail.com"
                        git config user.name "Sahana L"
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" app-manifests/deployment.yaml
                        git add app-manifests/deployment.yaml
                        git commit -m "Update backend deployment to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
                    '''
                }
            }
            post {
                failure {
                    echo 'Deployment file update or Git push failed.'
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline execution completed.'
        }
        failure {
            echo 'Pipeline failed. Notifying stakeholders...'
        }
    }
}