pipeline {
    agent {
        docker {
            image 'node:16'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    environment {
        SONAR_URL = "http://your-sonarqube-url"
        SONAR_PROJECT_KEY = "frontend-project"
        SONAR_PROJECT_NAME = "LMS Frontend"
        SONAR_AUTH_TOKEN = credentials('sonarqube-token')
        FRONTEND_DOCKER_IMAGE = "sahanal/lms-frontend:${BUILD_NUMBER}"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
            post {
                failure {
                    echo 'Checkout failed. Notifying the team...'
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                dir('Frontend') {
                    sh 'npm install'
                }
            }
            post {
                failure {
                    echo 'Failed to install dependencies. Check npm logs.'
                }
            }
        }
        stage('Static Code Analysis') {
            steps {
                dir('Frontend') {
                    sh '''
                        npx sonar-scanner \
                            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                            -Dsonar.projectName=${SONAR_PROJECT_NAME} \
                            -Dsonar.sources=src \
                            -Dsonar.host.url=${SONAR_URL} \
                            -Dsonar.login=${SONAR_AUTH_TOKEN}
                    '''
                }
            }
            post {
                failure {
                    echo 'Static code analysis failed. Review the SonarQube report.'
                }
            }
        }
        stage('Build Angular App') {
            steps {
                dir('Frontend') {
                    sh 'ng build --prod'
                }
            }
            post {
                failure {
                    echo 'Build failed. Please check the logs.'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                dir('Frontend') {
                    sh 'docker build -t ${FRONTEND_DOCKER_IMAGE} .'
                }
            }
            post {
                failure {
                    echo 'Docker image build failed.'
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
                        docker.image("${FRONTEND_DOCKER_IMAGE}").push()
                    }
                }
            }
            post {
                failure {
                    echo 'Docker image push failed.'
                }
            }
        }
        stage('Update Deployment') {
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        git config user.email "sahanalakshminarayanan@gmail.com"
                        git config user.name "Sahana L"
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" Frontend/app-manifests/deployment.yml
                        git add Frontend/app-manifests/deployment.yml
                        git commit -m "Update frontend deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/Sahana-bit-oss/LMS-Portal.git HEAD:main
                    '''
                }
            }
            post {
                failure {
                    echo 'Deployment file update or Git push failed.'
                }
            }
        }
    }
    post {
        always {
            echo 'Frontend pipeline execution completed.'
        }
        failure {
            echo 'Frontend pipeline failed. Notifying stakeholders...'
        }
    }
}